= Debezium Logging
:awestruct-layout: doc
:linkattrs:
:icons: font
:source-highlighter: highlight.js

Debezium has extensive logging built into its connectors, and you can easily change the logging configuration to control which of these log statements appear in the logs and where those logs are sent. Debezium (and Kafka, Kafka Conect, and Zookeeper) use the ubiquitous https://logging.apache.org/log4j/1.2/[Log4J] logging framework for Java. You configure Log4J for the whole Java application.

== Logging concepts

Each log message produced by the application will be sent to a specific _logger_. Every logger has a name (e.g., `io.debezium.connector.mysql`), and the names form a _hierarchy_ of loggers: the logger named `io.debezium.connector.mysql` has a parent logger named `io.debezium.connector`, which has a parent logger named `io.debezium`, all the way to the _root logger_ at the very top of this hierarchy.

Every log message produced by the application will also have a specific log _level_:

1. `ERROR` for errors, exceptions, and other significant problems
1. `WARN` for _potential_ problems and issues
1. `INFO` - for status and general activity (usually low-volume)
1. `DEBUG` - more detailed activity that would be useful in diagnosing unexpected behavior
1. `TRACE` - very verbose and detailed activity (usally very high volume)

Log4J also allows you to define multiple _appenders_, which are essentially destinations where log messages will be written. Each appender controls the format of the log messages.

To customize logging, you specify the desired level for each logger and the appender(s) where those log messages should be written. Since loggers are hierarchical, the configuration for the root logger serves as a default for all of the loggers below it, although you can override any child (or decendant) logger.

== Example logging configuration

If you're running Debezium connectors in a Kafka Connect process, then Kafka Connect will use the Log4J configuration file (e.g., `config/log4j.properties`) in the Kafka installation. The following are snippets from this file:

[source]
.log4j.properties
----
log4j.rootLogger=INFO, stdout <1>

log4j.appender.stdout=org.apache.log4j.ConsoleAppender <2>
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout <3>
log4j.appender.stdout.layout.ConversionPattern=[%d] %p %m (%c)%n <4>
...
log4j.logger.kafka=INFO, kafkaAppender
...
----
<1> Define the root logger should include `INFO`, `WARN`, and `ERROR` messages that should be written to the `stdout` appender.
<2> Defines the `stdout` appender as writing to the console (as opposed to a file).
<3> The `stdout` appender uses a pattern matching algorithm for the formatter
<4> The pattern for the `stdout` appender (see the https://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/PatternLayout.html[Log4J documentation] for details)

Unless you configure other loggers, all of the loggers used by Debezium will inherit the `rootLogger` configuration.

== Debezium loggers

For the most part, the Debezium code sends its log messages to loggers with names that match the fully-qualified name of the Java class that is generating the log message. This normally works well, since we use packages to organize code with similar or related functions.

This means that you can easily control all of the log messages for a specific class or for all of the classes within a package. For example, to turn on debug logging for the MySQL connector (and the database history implementation used by the connector) might be as simple as adding the following line(s) to your `log4j.properties` file:

[source]
.log4j.properties
----
...
log4j.logger.io.debezium.connector.mysql=DEBUG, stdout <1>
log4j.logger.io.debezium.relational.history=DEBUG, stdout <2>

log4j.additivity.io.debezium.connector.mysql=false <3>
log4j.additivity.io.debezium.relational.history=false <3>
...
----
<1> Configures the logger named `io.debezium.connector.mysql` to send `DEBUG`, `INFO`, `WARN`, and `ERROR` messages to the `stdout` appender
<2> Configures the logger named `io.debezium.relational.history` to send `DEBUG`, `INFO`, `WARN`, and `ERROR` messages to the `stdout` appender
<3> Turns off _additivity_, meaning the messages will not be sent also to appenders of parent loggers (this can prevent seeing duplicate log messages when using multiple appenders)


== Mapped Diagnostic Contexts

Most Debezium connectors use multiple threads to separate different activities, and the Kafka Connect workers also use multiple threads. This can make it challenging to associate the various log messages with the corresponding logical activity. To make this easier, Debezium uses _mapped diagnostic contexts_, or _MDC_ to provide additional information for each thread via several properties that you can embed in your appender patterns:

* `dbz.connectorType` - A short alias for the type of connector. For example, `mysql`, `mongo`, `postgres`, etc. All threads associated with the same type of connector use the same value.
* `dbz.connectorName` - The name of the connector as defined in the connector's configuration. For example `products`, `serverA`, etc. All threads associated with a specific connector instance use the same value.
* `dbz.connectorContext` - A short name for an activity running as a separate thread running within the connector's task. For example, `main`, `binlog`, `snapshot`, etc. In some cases when a thread is allocated for a specific resource (e.g., table or collection), the name of that resource could be used instead. Each thread associated with a connector would use a distinct value.

You can use these properties within the appender's pattern. For example, the following is a modification of the `stdout` appender's layout to use these MDC properties:

[source]
.log4j.properties
----
...
log4j.appender.stdout.layout.ConversionPattern=%d{ISO8601} %-5p  %X{dbz.connectorType}|%X{dbz.connectorName}|%X{dbz.connectorContext}  %m   [%c]%n
...
----

This will produce messages similar to these:

[source]
----
...
2017-02-07 20:49:37,692 INFO   MySQL|dbserver1|snapshot  Starting snapshot for jdbc:mysql://mysql:3306/?useInformationSchema=true&nullCatalogMeansCurrent=false&useSSL=false&useUnicode=true&characterEncoding=UTF-8&characterSetResults=UTF-8&zeroDateTimeBehavior=convertToNull with user 'debezium'   [io.debezium.connector.mysql.SnapshotReader]
2017-02-07 20:49:37,696 INFO   MySQL|dbserver1|snapshot  Snapshot is using user 'debezium' with these MySQL grants:   [io.debezium.connector.mysql.SnapshotReader]
2017-02-07 20:49:37,697 INFO   MySQL|dbserver1|snapshot  	GRANT SELECT, RELOAD, SHOW DATABASES, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'debezium'@'%'   [io.debezium.connector.mysql.SnapshotReader]
...
----

Notice how each line includes the connector type (e.g., `MySQL`), the name of the connector (e.g., `dbserver1`), and the activity of the thread (e.g., `snapshot`).


== Debezium Docker images

The Debezium Docker images for Zookeeper, Kafka, and Kafka Connect all set up their `log4j.properties` file to configure the Debezium-related loggers and to ensure all log messages go to the Docker containers console so that it is captured in the Docker logs and in file files under the `/kafka/logs` directory (which you can mount if needed).

The containers also use the `LOG_LEVEL` environment variable to set the log level for the root logger. So, all you have to do is set this environment variable to one of the log levels (e.g., `-e LOG_LEVEL=DEBUG`), and all of the code within the container will start using that log level. For example:

If you need more control, create a new image that is based on ours, except in your Dockerfile copy your own `log4j.properties` file into the image:

[source]
.Dockerfile
----
...
COPY log4j.properties $KAFKA_HOME/config/log4j.properties
...
----

